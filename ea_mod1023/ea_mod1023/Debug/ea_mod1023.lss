
ea_mod1023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00000398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000430  000007c8  00020430  2**2
                  ALLOC
  3 .stack        00002004  2000044c  000007e4  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000c57  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e1  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000213e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000078  00000000  00000000  00021429  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000214a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015bce  00000000  00000000  000214e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000016c1  00000000  00000000  000370b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000832bd  00000000  00000000  00038778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001b0  00000000  00000000  000bba38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002450 	.word	0x20002450
   4:	00000121 	.word	0x00000121
   8:	0000011d 	.word	0x0000011d
   c:	0000011d 	.word	0x0000011d
	...
  2c:	0000011d 	.word	0x0000011d
	...
  38:	0000011d 	.word	0x0000011d
  3c:	0000011d 	.word	0x0000011d
  40:	0000011d 	.word	0x0000011d
  44:	0000011d 	.word	0x0000011d
  48:	0000011d 	.word	0x0000011d
  4c:	0000011d 	.word	0x0000011d
  50:	0000011d 	.word	0x0000011d
  54:	0000011d 	.word	0x0000011d
  58:	0000011d 	.word	0x0000011d
  5c:	0000011d 	.word	0x0000011d
  60:	0000011d 	.word	0x0000011d
  64:	0000011d 	.word	0x0000011d
  68:	0000011d 	.word	0x0000011d
  6c:	0000011d 	.word	0x0000011d
  70:	0000011d 	.word	0x0000011d
  74:	0000011d 	.word	0x0000011d
  78:	0000011d 	.word	0x0000011d
  7c:	0000011d 	.word	0x0000011d
  80:	0000011d 	.word	0x0000011d
  84:	0000011d 	.word	0x0000011d
  88:	0000011d 	.word	0x0000011d
  8c:	0000011d 	.word	0x0000011d
  90:	0000011d 	.word	0x0000011d
  94:	0000011d 	.word	0x0000011d
  98:	0000011d 	.word	0x0000011d
  9c:	0000011d 	.word	0x0000011d
  a0:	0000011d 	.word	0x0000011d
  a4:	0000011d 	.word	0x0000011d
  a8:	0000011d 	.word	0x0000011d
  ac:	0000011d 	.word	0x0000011d
  b0:	0000011d 	.word	0x0000011d
  b4:	0000011d 	.word	0x0000011d
  b8:	0000011d 	.word	0x0000011d

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	20000430 	.word	0x20000430
  dc:	00000000 	.word	0x00000000
  e0:	00000398 	.word	0x00000398

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000434 	.word	0x20000434
 110:	00000398 	.word	0x00000398
 114:	00000398 	.word	0x00000398
 118:	00000000 	.word	0x00000000

0000011c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 11c:	e7fe      	b.n	11c <Dummy_Handler>
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 120:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 122:	4b1b      	ldr	r3, [pc, #108]	; (190 <Reset_Handler+0x70>)
 124:	4a1b      	ldr	r2, [pc, #108]	; (194 <Reset_Handler+0x74>)
 126:	429a      	cmp	r2, r3
 128:	d003      	beq.n	132 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 12a:	4b1b      	ldr	r3, [pc, #108]	; (198 <Reset_Handler+0x78>)
 12c:	4a18      	ldr	r2, [pc, #96]	; (190 <Reset_Handler+0x70>)
 12e:	429a      	cmp	r2, r3
 130:	d304      	bcc.n	13c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 132:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x7c>)
 134:	4a1a      	ldr	r2, [pc, #104]	; (1a0 <Reset_Handler+0x80>)
 136:	429a      	cmp	r2, r3
 138:	d310      	bcc.n	15c <Reset_Handler+0x3c>
 13a:	e01e      	b.n	17a <Reset_Handler+0x5a>
 13c:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x84>)
 13e:	4b16      	ldr	r3, [pc, #88]	; (198 <Reset_Handler+0x78>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x70>)
 14e:	4911      	ldr	r1, [pc, #68]	; (194 <Reset_Handler+0x74>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x30>
 15a:	e7ea      	b.n	132 <Reset_Handler+0x12>
 15c:	4a12      	ldr	r2, [pc, #72]	; (1a8 <Reset_Handler+0x88>)
 15e:	4b0f      	ldr	r3, [pc, #60]	; (19c <Reset_Handler+0x7c>)
 160:	3303      	adds	r3, #3
 162:	1a9b      	subs	r3, r3, r2
 164:	089b      	lsrs	r3, r3, #2
 166:	3301      	adds	r3, #1
 168:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16a:	2200      	movs	r2, #0
                *pDest++ = 0;
 16c:	480c      	ldr	r0, [pc, #48]	; (1a0 <Reset_Handler+0x80>)
 16e:	2100      	movs	r1, #0
 170:	1814      	adds	r4, r2, r0
 172:	6021      	str	r1, [r4, #0]
 174:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 176:	429a      	cmp	r2, r3
 178:	d1fa      	bne.n	170 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 17a:	4a0c      	ldr	r2, [pc, #48]	; (1ac <Reset_Handler+0x8c>)
 17c:	21ff      	movs	r1, #255	; 0xff
 17e:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <Reset_Handler+0x90>)
 180:	438b      	bics	r3, r1
 182:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x94>)
 186:	4798      	blx	r3

        /* Branch to main function */
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x98>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x6c>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	20000000 	.word	0x20000000
 194:	00000398 	.word	0x00000398
 198:	20000430 	.word	0x20000430
 19c:	2000044c 	.word	0x2000044c
 1a0:	20000430 	.word	0x20000430
 1a4:	20000004 	.word	0x20000004
 1a8:	20000434 	.word	0x20000434
 1ac:	e000ed00 	.word	0xe000ed00
 1b0:	00000000 	.word	0x00000000
 1b4:	000001f5 	.word	0x000001f5
 1b8:	000001cd 	.word	0x000001cd

000001bc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1bc:	4a01      	ldr	r2, [pc, #4]	; (1c4 <SystemInit+0x8>)
 1be:	4b02      	ldr	r3, [pc, #8]	; (1c8 <SystemInit+0xc>)
 1c0:	601a      	str	r2, [r3, #0]
	return;
}
 1c2:	4770      	bx	lr
 1c4:	003d0900 	.word	0x003d0900
 1c8:	20000000 	.word	0x20000000

000001cc <main>:
#include "sam.h"
#include "sam_utils.h"


int main(void)
{
 1cc:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <main+0x20>)
 1d0:	4798      	blx	r3

    /* Replace with your application code */
	//PORT->Group[0].DIR.reg = (1 << 15);
	//PORT->Group[0].OUT.reg &= ~(1 << 15);	//Drive PA00 high
	MAKE_OUTPUT(PORTA, 15);
 1d2:	2382      	movs	r3, #130	; 0x82
 1d4:	05db      	lsls	r3, r3, #23
 1d6:	681a      	ldr	r2, [r3, #0]
 1d8:	2180      	movs	r1, #128	; 0x80
 1da:	0209      	lsls	r1, r1, #8
 1dc:	430a      	orrs	r2, r1
 1de:	601a      	str	r2, [r3, #0]
	CLEAR_PIN(PORTA, 15);
 1e0:	6919      	ldr	r1, [r3, #16]
 1e2:	4a03      	ldr	r2, [pc, #12]	; (1f0 <main+0x24>)
 1e4:	400a      	ands	r2, r1
 1e6:	611a      	str	r2, [r3, #16]
 1e8:	e7fe      	b.n	1e8 <main+0x1c>
 1ea:	46c0      	nop			; (mov r8, r8)
 1ec:	000001bd 	.word	0x000001bd
 1f0:	ffff7fff 	.word	0xffff7fff

000001f4 <__libc_init_array>:
 1f4:	b570      	push	{r4, r5, r6, lr}
 1f6:	4e0d      	ldr	r6, [pc, #52]	; (22c <__libc_init_array+0x38>)
 1f8:	4d0d      	ldr	r5, [pc, #52]	; (230 <__libc_init_array+0x3c>)
 1fa:	2400      	movs	r4, #0
 1fc:	1bad      	subs	r5, r5, r6
 1fe:	10ad      	asrs	r5, r5, #2
 200:	d005      	beq.n	20e <__libc_init_array+0x1a>
 202:	00a3      	lsls	r3, r4, #2
 204:	58f3      	ldr	r3, [r6, r3]
 206:	3401      	adds	r4, #1
 208:	4798      	blx	r3
 20a:	42a5      	cmp	r5, r4
 20c:	d1f9      	bne.n	202 <__libc_init_array+0xe>
 20e:	f000 f8b1 	bl	374 <_init>
 212:	4e08      	ldr	r6, [pc, #32]	; (234 <__libc_init_array+0x40>)
 214:	4d08      	ldr	r5, [pc, #32]	; (238 <__libc_init_array+0x44>)
 216:	2400      	movs	r4, #0
 218:	1bad      	subs	r5, r5, r6
 21a:	10ad      	asrs	r5, r5, #2
 21c:	d005      	beq.n	22a <__libc_init_array+0x36>
 21e:	00a3      	lsls	r3, r4, #2
 220:	58f3      	ldr	r3, [r6, r3]
 222:	3401      	adds	r4, #1
 224:	4798      	blx	r3
 226:	42a5      	cmp	r5, r4
 228:	d1f9      	bne.n	21e <__libc_init_array+0x2a>
 22a:	bd70      	pop	{r4, r5, r6, pc}
 22c:	00000380 	.word	0x00000380
 230:	00000380 	.word	0x00000380
 234:	00000380 	.word	0x00000380
 238:	00000388 	.word	0x00000388

0000023c <register_fini>:
 23c:	4b03      	ldr	r3, [pc, #12]	; (24c <register_fini+0x10>)
 23e:	b510      	push	{r4, lr}
 240:	2b00      	cmp	r3, #0
 242:	d002      	beq.n	24a <register_fini+0xe>
 244:	4802      	ldr	r0, [pc, #8]	; (250 <register_fini+0x14>)
 246:	f000 f805 	bl	254 <atexit>
 24a:	bd10      	pop	{r4, pc}
 24c:	00000000 	.word	0x00000000
 250:	00000265 	.word	0x00000265

00000254 <atexit>:
 254:	b510      	push	{r4, lr}
 256:	0001      	movs	r1, r0
 258:	2300      	movs	r3, #0
 25a:	2200      	movs	r2, #0
 25c:	2000      	movs	r0, #0
 25e:	f000 f81b 	bl	298 <__register_exitproc>
 262:	bd10      	pop	{r4, pc}

00000264 <__libc_fini_array>:
 264:	b570      	push	{r4, r5, r6, lr}
 266:	4b09      	ldr	r3, [pc, #36]	; (28c <__libc_fini_array+0x28>)
 268:	4c09      	ldr	r4, [pc, #36]	; (290 <__libc_fini_array+0x2c>)
 26a:	1ae4      	subs	r4, r4, r3
 26c:	10a4      	asrs	r4, r4, #2
 26e:	d009      	beq.n	284 <__libc_fini_array+0x20>
 270:	4a08      	ldr	r2, [pc, #32]	; (294 <__libc_fini_array+0x30>)
 272:	18a5      	adds	r5, r4, r2
 274:	00ad      	lsls	r5, r5, #2
 276:	18ed      	adds	r5, r5, r3
 278:	682b      	ldr	r3, [r5, #0]
 27a:	3c01      	subs	r4, #1
 27c:	4798      	blx	r3
 27e:	3d04      	subs	r5, #4
 280:	2c00      	cmp	r4, #0
 282:	d1f9      	bne.n	278 <__libc_fini_array+0x14>
 284:	f000 f880 	bl	388 <_fini>
 288:	bd70      	pop	{r4, r5, r6, pc}
 28a:	46c0      	nop			; (mov r8, r8)
 28c:	00000394 	.word	0x00000394
 290:	00000398 	.word	0x00000398
 294:	3fffffff 	.word	0x3fffffff

00000298 <__register_exitproc>:
 298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 29a:	4644      	mov	r4, r8
 29c:	465f      	mov	r7, fp
 29e:	4656      	mov	r6, sl
 2a0:	464d      	mov	r5, r9
 2a2:	469b      	mov	fp, r3
 2a4:	4b2f      	ldr	r3, [pc, #188]	; (364 <__register_exitproc+0xcc>)
 2a6:	b4f0      	push	{r4, r5, r6, r7}
 2a8:	681c      	ldr	r4, [r3, #0]
 2aa:	23a4      	movs	r3, #164	; 0xa4
 2ac:	005b      	lsls	r3, r3, #1
 2ae:	0005      	movs	r5, r0
 2b0:	58e0      	ldr	r0, [r4, r3]
 2b2:	000e      	movs	r6, r1
 2b4:	4690      	mov	r8, r2
 2b6:	2800      	cmp	r0, #0
 2b8:	d04b      	beq.n	352 <__register_exitproc+0xba>
 2ba:	6843      	ldr	r3, [r0, #4]
 2bc:	2b1f      	cmp	r3, #31
 2be:	dc0d      	bgt.n	2dc <__register_exitproc+0x44>
 2c0:	1c5c      	adds	r4, r3, #1
 2c2:	2d00      	cmp	r5, #0
 2c4:	d121      	bne.n	30a <__register_exitproc+0x72>
 2c6:	3302      	adds	r3, #2
 2c8:	009b      	lsls	r3, r3, #2
 2ca:	6044      	str	r4, [r0, #4]
 2cc:	501e      	str	r6, [r3, r0]
 2ce:	2000      	movs	r0, #0
 2d0:	bc3c      	pop	{r2, r3, r4, r5}
 2d2:	4690      	mov	r8, r2
 2d4:	4699      	mov	r9, r3
 2d6:	46a2      	mov	sl, r4
 2d8:	46ab      	mov	fp, r5
 2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 2dc:	4b22      	ldr	r3, [pc, #136]	; (368 <__register_exitproc+0xd0>)
 2de:	2b00      	cmp	r3, #0
 2e0:	d03c      	beq.n	35c <__register_exitproc+0xc4>
 2e2:	20c8      	movs	r0, #200	; 0xc8
 2e4:	0040      	lsls	r0, r0, #1
 2e6:	e000      	b.n	2ea <__register_exitproc+0x52>
 2e8:	bf00      	nop
 2ea:	2800      	cmp	r0, #0
 2ec:	d036      	beq.n	35c <__register_exitproc+0xc4>
 2ee:	22a4      	movs	r2, #164	; 0xa4
 2f0:	2300      	movs	r3, #0
 2f2:	0052      	lsls	r2, r2, #1
 2f4:	58a1      	ldr	r1, [r4, r2]
 2f6:	6043      	str	r3, [r0, #4]
 2f8:	6001      	str	r1, [r0, #0]
 2fa:	50a0      	str	r0, [r4, r2]
 2fc:	3240      	adds	r2, #64	; 0x40
 2fe:	5083      	str	r3, [r0, r2]
 300:	3204      	adds	r2, #4
 302:	5083      	str	r3, [r0, r2]
 304:	2401      	movs	r4, #1
 306:	2d00      	cmp	r5, #0
 308:	d0dd      	beq.n	2c6 <__register_exitproc+0x2e>
 30a:	009a      	lsls	r2, r3, #2
 30c:	4691      	mov	r9, r2
 30e:	4481      	add	r9, r0
 310:	4642      	mov	r2, r8
 312:	2188      	movs	r1, #136	; 0x88
 314:	464f      	mov	r7, r9
 316:	507a      	str	r2, [r7, r1]
 318:	22c4      	movs	r2, #196	; 0xc4
 31a:	0052      	lsls	r2, r2, #1
 31c:	4690      	mov	r8, r2
 31e:	4480      	add	r8, r0
 320:	4642      	mov	r2, r8
 322:	3987      	subs	r1, #135	; 0x87
 324:	4099      	lsls	r1, r3
 326:	6812      	ldr	r2, [r2, #0]
 328:	468a      	mov	sl, r1
 32a:	430a      	orrs	r2, r1
 32c:	4694      	mov	ip, r2
 32e:	4642      	mov	r2, r8
 330:	4661      	mov	r1, ip
 332:	6011      	str	r1, [r2, #0]
 334:	2284      	movs	r2, #132	; 0x84
 336:	4649      	mov	r1, r9
 338:	465f      	mov	r7, fp
 33a:	0052      	lsls	r2, r2, #1
 33c:	508f      	str	r7, [r1, r2]
 33e:	2d02      	cmp	r5, #2
 340:	d1c1      	bne.n	2c6 <__register_exitproc+0x2e>
 342:	0002      	movs	r2, r0
 344:	4655      	mov	r5, sl
 346:	328d      	adds	r2, #141	; 0x8d
 348:	32ff      	adds	r2, #255	; 0xff
 34a:	6811      	ldr	r1, [r2, #0]
 34c:	430d      	orrs	r5, r1
 34e:	6015      	str	r5, [r2, #0]
 350:	e7b9      	b.n	2c6 <__register_exitproc+0x2e>
 352:	0020      	movs	r0, r4
 354:	304d      	adds	r0, #77	; 0x4d
 356:	30ff      	adds	r0, #255	; 0xff
 358:	50e0      	str	r0, [r4, r3]
 35a:	e7ae      	b.n	2ba <__register_exitproc+0x22>
 35c:	2001      	movs	r0, #1
 35e:	4240      	negs	r0, r0
 360:	e7b6      	b.n	2d0 <__register_exitproc+0x38>
 362:	46c0      	nop			; (mov r8, r8)
 364:	00000370 	.word	0x00000370
 368:	00000000 	.word	0x00000000
 36c:	00000043 	.word	0x00000043

00000370 <_global_impure_ptr>:
 370:	20000008                                ... 

00000374 <_init>:
 374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 376:	46c0      	nop			; (mov r8, r8)
 378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 37a:	bc08      	pop	{r3}
 37c:	469e      	mov	lr, r3
 37e:	4770      	bx	lr

00000380 <__init_array_start>:
 380:	0000023d 	.word	0x0000023d

00000384 <__frame_dummy_init_array_entry>:
 384:	000000e5                                ....

00000388 <_fini>:
 388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 38a:	46c0      	nop			; (mov r8, r8)
 38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 38e:	bc08      	pop	{r3}
 390:	469e      	mov	lr, r3
 392:	4770      	bx	lr

00000394 <__fini_array_start>:
 394:	000000bd 	.word	0x000000bd
