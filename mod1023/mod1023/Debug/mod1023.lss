
mod1023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000004b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  20000430  000008e0  00020430  2**2
                  ALLOC
  3 .stack        00002000  20000458  00000908  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003469  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  0002391a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000215  00000000  00000000  00024074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000f8  00000000  00000000  00024289  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00024381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016396  00000000  00000000  00024429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002683  00000000  00000000  0003a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083cf7  00000000  00000000  0003ce42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000294  00000000  00000000  000c0b3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002458 	.word	0x20002458
   4:	00000121 	.word	0x00000121
   8:	0000011d 	.word	0x0000011d
   c:	0000011d 	.word	0x0000011d
	...
  2c:	0000011d 	.word	0x0000011d
	...
  38:	0000011d 	.word	0x0000011d
  3c:	0000011d 	.word	0x0000011d
  40:	0000011d 	.word	0x0000011d
  44:	0000011d 	.word	0x0000011d
  48:	0000011d 	.word	0x0000011d
  4c:	0000011d 	.word	0x0000011d
  50:	0000011d 	.word	0x0000011d
  54:	0000011d 	.word	0x0000011d
  58:	0000011d 	.word	0x0000011d
  5c:	0000011d 	.word	0x0000011d
  60:	0000011d 	.word	0x0000011d
  64:	0000011d 	.word	0x0000011d
  68:	0000011d 	.word	0x0000011d
  6c:	0000011d 	.word	0x0000011d
  70:	0000011d 	.word	0x0000011d
  74:	0000011d 	.word	0x0000011d
  78:	0000011d 	.word	0x0000011d
  7c:	0000011d 	.word	0x0000011d
  80:	0000011d 	.word	0x0000011d
  84:	0000011d 	.word	0x0000011d
  88:	0000011d 	.word	0x0000011d
  8c:	0000011d 	.word	0x0000011d
  90:	00000249 	.word	0x00000249
  94:	0000011d 	.word	0x0000011d
  98:	0000011d 	.word	0x0000011d
  9c:	0000011d 	.word	0x0000011d
  a0:	0000011d 	.word	0x0000011d
  a4:	0000011d 	.word	0x0000011d
  a8:	0000011d 	.word	0x0000011d
  ac:	0000011d 	.word	0x0000011d
  b0:	0000011d 	.word	0x0000011d
  b4:	0000011d 	.word	0x0000011d
  b8:	0000011d 	.word	0x0000011d

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	20000430 	.word	0x20000430
  dc:	00000000 	.word	0x00000000
  e0:	000004b0 	.word	0x000004b0

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000434 	.word	0x20000434
 110:	000004b0 	.word	0x000004b0
 114:	000004b0 	.word	0x000004b0
 118:	00000000 	.word	0x00000000

0000011c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 11c:	e7fe      	b.n	11c <Dummy_Handler>
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 120:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 122:	4b1b      	ldr	r3, [pc, #108]	; (190 <Reset_Handler+0x70>)
 124:	4a1b      	ldr	r2, [pc, #108]	; (194 <Reset_Handler+0x74>)
 126:	429a      	cmp	r2, r3
 128:	d003      	beq.n	132 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 12a:	4b1b      	ldr	r3, [pc, #108]	; (198 <Reset_Handler+0x78>)
 12c:	4a18      	ldr	r2, [pc, #96]	; (190 <Reset_Handler+0x70>)
 12e:	429a      	cmp	r2, r3
 130:	d304      	bcc.n	13c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 132:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x7c>)
 134:	4a1a      	ldr	r2, [pc, #104]	; (1a0 <Reset_Handler+0x80>)
 136:	429a      	cmp	r2, r3
 138:	d310      	bcc.n	15c <Reset_Handler+0x3c>
 13a:	e01e      	b.n	17a <Reset_Handler+0x5a>
 13c:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x84>)
 13e:	4b16      	ldr	r3, [pc, #88]	; (198 <Reset_Handler+0x78>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x70>)
 14e:	4911      	ldr	r1, [pc, #68]	; (194 <Reset_Handler+0x74>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x30>
 15a:	e7ea      	b.n	132 <Reset_Handler+0x12>
 15c:	4a12      	ldr	r2, [pc, #72]	; (1a8 <Reset_Handler+0x88>)
 15e:	4b0f      	ldr	r3, [pc, #60]	; (19c <Reset_Handler+0x7c>)
 160:	3303      	adds	r3, #3
 162:	1a9b      	subs	r3, r3, r2
 164:	089b      	lsrs	r3, r3, #2
 166:	3301      	adds	r3, #1
 168:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16a:	2200      	movs	r2, #0
                *pDest++ = 0;
 16c:	480c      	ldr	r0, [pc, #48]	; (1a0 <Reset_Handler+0x80>)
 16e:	2100      	movs	r1, #0
 170:	1814      	adds	r4, r2, r0
 172:	6021      	str	r1, [r4, #0]
 174:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 176:	429a      	cmp	r2, r3
 178:	d1fa      	bne.n	170 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 17a:	4a0c      	ldr	r2, [pc, #48]	; (1ac <Reset_Handler+0x8c>)
 17c:	21ff      	movs	r1, #255	; 0xff
 17e:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <Reset_Handler+0x90>)
 180:	438b      	bics	r3, r1
 182:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x94>)
 186:	4798      	blx	r3

        /* Branch to main function */
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x98>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x6c>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	20000000 	.word	0x20000000
 194:	000004b0 	.word	0x000004b0
 198:	20000430 	.word	0x20000430
 19c:	20000458 	.word	0x20000458
 1a0:	20000430 	.word	0x20000430
 1a4:	20000004 	.word	0x20000004
 1a8:	20000434 	.word	0x20000434
 1ac:	e000ed00 	.word	0xe000ed00
 1b0:	00000000 	.word	0x00000000
 1b4:	0000030d 	.word	0x0000030d
 1b8:	000001cd 	.word	0x000001cd

000001bc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1bc:	4a01      	ldr	r2, [pc, #4]	; (1c4 <SystemInit+0x8>)
 1be:	4b02      	ldr	r3, [pc, #8]	; (1c8 <SystemInit+0xc>)
 1c0:	601a      	str	r2, [r3, #0]
	return;
}
 1c2:	4770      	bx	lr
 1c4:	003d0900 	.word	0x003d0900
 1c8:	20000000 	.word	0x20000000

000001cc <main>:
	while (gclk1_syncing()) {};
	GCLK->GENCTRL[1].reg |= (0x0001 << 8);
}

int main(void)
{
 1cc:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system */
    SystemInit();
 1ce:	4b16      	ldr	r3, [pc, #88]	; (228 <main+0x5c>)
 1d0:	4798      	blx	r3

	pinConfig(PA15, 0x01);
 1d2:	2201      	movs	r2, #1
 1d4:	210f      	movs	r1, #15
 1d6:	2082      	movs	r0, #130	; 0x82
 1d8:	05c0      	lsls	r0, r0, #23
 1da:	4d14      	ldr	r5, [pc, #80]	; (22c <main+0x60>)
 1dc:	47a8      	blx	r5
	
	pinConfig(PB15, OUTPUT);
 1de:	4c14      	ldr	r4, [pc, #80]	; (230 <main+0x64>)
 1e0:	2201      	movs	r2, #1
 1e2:	210f      	movs	r1, #15
 1e4:	0020      	movs	r0, r4
 1e6:	47a8      	blx	r5
	pinSet(PB15);
 1e8:	210f      	movs	r1, #15
 1ea:	0020      	movs	r0, r4
 1ec:	4b11      	ldr	r3, [pc, #68]	; (234 <main+0x68>)
 1ee:	4798      	blx	r3
	pinClear(PB15);
 1f0:	210f      	movs	r1, #15
 1f2:	0020      	movs	r0, r4
 1f4:	4b10      	ldr	r3, [pc, #64]	; (238 <main+0x6c>)
 1f6:	4798      	blx	r3
	pinFunction(PB15, IO_PERIPH_H);
 1f8:	2207      	movs	r2, #7
 1fa:	210f      	movs	r1, #15
 1fc:	0020      	movs	r0, r4
 1fe:	4b0f      	ldr	r3, [pc, #60]	; (23c <main+0x70>)
 200:	4798      	blx	r3
		GCLK_GENCTRL_OE |
		GCLK_GENCTRL_OOV;
		GCLK_GENCTRL_DIVSEL |
		GCLK_GENCTRL_GENEN;
	
	GCLK->GENCTRL[1].reg |= gclk_ctrl_reg;	 
 202:	4a0f      	ldr	r2, [pc, #60]	; (240 <main+0x74>)
 204:	6a53      	ldr	r3, [r2, #36]	; 0x24
 206:	490f      	ldr	r1, [pc, #60]	; (244 <main+0x78>)
 208:	430b      	orrs	r3, r1
 20a:	6253      	str	r3, [r2, #36]	; 0x24
#define PB15	PORTB, 15

uns32 current, previous, elapsed;

static inline uns8 gclk1_syncing() {
	if (GCLK->SYNCBUSY.bit.GENCTRL1 & GCLK_SYNCBUSY_GENCTRL1) 
 20c:	0013      	movs	r3, r2
 20e:	685b      	ldr	r3, [r3, #4]
		GCLK_GENCTRL_DIVSEL |
		GCLK_GENCTRL_GENEN;
	
	GCLK->GENCTRL[1].reg |= gclk_ctrl_reg;	 
	while (gclk1_syncing()) {};
	GCLK->GENCTRL[1].reg |= (0x0001 << 8);
 210:	6a53      	ldr	r3, [r2, #36]	; 0x24
 212:	2180      	movs	r1, #128	; 0x80
 214:	0049      	lsls	r1, r1, #1
 216:	430b      	orrs	r3, r1
 218:	6253      	str	r3, [r2, #36]	; 0x24
	pinClear(PB15);
	pinFunction(PB15, IO_PERIPH_H);
	
	_initGclkSource();
	
	pinClear(PA15);
 21a:	39f1      	subs	r1, #241	; 0xf1
 21c:	2082      	movs	r0, #130	; 0x82
 21e:	05c0      	lsls	r0, r0, #23
 220:	4b05      	ldr	r3, [pc, #20]	; (238 <main+0x6c>)
 222:	4798      	blx	r3
 224:	e7fe      	b.n	224 <main+0x58>
 226:	46c0      	nop			; (mov r8, r8)
 228:	000001bd 	.word	0x000001bd
 22c:	00000275 	.word	0x00000275
 230:	41000080 	.word	0x41000080
 234:	000002cd 	.word	0x000002cd
 238:	000002c1 	.word	0x000002c1
 23c:	000002d9 	.word	0x000002d9
 240:	40001c00 	.word	0x40001c00
 244:	00020c06 	.word	0x00020c06

00000248 <TC0_Handler>:
	TC0->COUNT32.INTENSET.bit.MC0 = 1;
}


void TC0_Handler() {
	_micros++;
 248:	4a08      	ldr	r2, [pc, #32]	; (26c <TC0_Handler+0x24>)
 24a:	6853      	ldr	r3, [r2, #4]
 24c:	3301      	adds	r3, #1
 24e:	6053      	str	r3, [r2, #4]
	if (_micros == 1000)
 250:	22fa      	movs	r2, #250	; 0xfa
 252:	0092      	lsls	r2, r2, #2
 254:	4293      	cmp	r3, r2
 256:	d103      	bne.n	260 <TC0_Handler+0x18>
		_millis++;
 258:	4a04      	ldr	r2, [pc, #16]	; (26c <TC0_Handler+0x24>)
 25a:	6813      	ldr	r3, [r2, #0]
 25c:	3301      	adds	r3, #1
 25e:	6013      	str	r3, [r2, #0]
		
	TC0->COUNT32.INTFLAG.bit.MC0 = 1;
 260:	4a03      	ldr	r2, [pc, #12]	; (270 <TC0_Handler+0x28>)
 262:	7a91      	ldrb	r1, [r2, #10]
 264:	2310      	movs	r3, #16
 266:	430b      	orrs	r3, r1
 268:	7293      	strb	r3, [r2, #10]
}
 26a:	4770      	bx	lr
 26c:	2000044c 	.word	0x2000044c
 270:	42003000 	.word	0x42003000

00000274 <pinConfig>:
 */ 

#include "sam.h"
#include "utilities.h"

void pinConfig(PortGroup *port, uns32 pin, uns8 mode) {
 274:	b510      	push	{r4, lr}
	switch(mode) {
 276:	2a01      	cmp	r2, #1
 278:	d00a      	beq.n	290 <pinConfig+0x1c>
 27a:	2a00      	cmp	r2, #0
 27c:	d002      	beq.n	284 <pinConfig+0x10>
 27e:	2a02      	cmp	r2, #2
 280:	d00c      	beq.n	29c <pinConfig+0x28>
 282:	e01c      	b.n	2be <pinConfig+0x4a>
		case INPUT:
			port->DIR.reg &= (~(1 << pin));
 284:	6803      	ldr	r3, [r0, #0]
 286:	2201      	movs	r2, #1
 288:	408a      	lsls	r2, r1
 28a:	4393      	bics	r3, r2
 28c:	6003      	str	r3, [r0, #0]
			break;
 28e:	e016      	b.n	2be <pinConfig+0x4a>
		case OUTPUT:
			//MAKE_OUTPUT(port, pin);
			port->DIR.reg |= (1 << pin);
 290:	6802      	ldr	r2, [r0, #0]
 292:	2301      	movs	r3, #1
 294:	408b      	lsls	r3, r1
 296:	4313      	orrs	r3, r2
 298:	6003      	str	r3, [r0, #0]
			break;
 29a:	e010      	b.n	2be <pinConfig+0x4a>
		case INPUT_PULLUP:
			//BIT_CLEAR(port->DIR.reg, pin);
			port->DIR.reg &= (~(1 << pin));
 29c:	6802      	ldr	r2, [r0, #0]
 29e:	2301      	movs	r3, #1
 2a0:	001c      	movs	r4, r3
 2a2:	408c      	lsls	r4, r1
 2a4:	43a2      	bics	r2, r4
 2a6:	6002      	str	r2, [r0, #0]
			BIT_SET(port->PINCFG[pin].reg, port->PINCFG->bit.PULLEN);
 2a8:	2240      	movs	r2, #64	; 0x40
 2aa:	5c82      	ldrb	r2, [r0, r2]
 2ac:	0752      	lsls	r2, r2, #29
 2ae:	0fd2      	lsrs	r2, r2, #31
 2b0:	1841      	adds	r1, r0, r1
 2b2:	3140      	adds	r1, #64	; 0x40
 2b4:	7808      	ldrb	r0, [r1, #0]
 2b6:	4093      	lsls	r3, r2
 2b8:	4303      	orrs	r3, r0
 2ba:	b2db      	uxtb	r3, r3
 2bc:	700b      	strb	r3, [r1, #0]
			break;
		default:
			break;
	}
}
 2be:	bd10      	pop	{r4, pc}

000002c0 <pinClear>:

void pinClear(PortGroup *port, uns32 pin) {
	port->OUTCLR.reg |= (1 << pin);
 2c0:	6942      	ldr	r2, [r0, #20]
 2c2:	2301      	movs	r3, #1
 2c4:	408b      	lsls	r3, r1
 2c6:	4313      	orrs	r3, r2
 2c8:	6143      	str	r3, [r0, #20]
}
 2ca:	4770      	bx	lr

000002cc <pinSet>:

void pinSet(PortGroup *port, uns32 pin) {
	port->OUTCLR.reg &= (~(1 << pin));
 2cc:	6943      	ldr	r3, [r0, #20]
 2ce:	2201      	movs	r2, #1
 2d0:	408a      	lsls	r2, r1
 2d2:	4393      	bics	r3, r2
 2d4:	6143      	str	r3, [r0, #20]
}
 2d6:	4770      	bx	lr

000002d8 <pinFunction>:

void pinToggle(PortGroup *port, uns32 pin) {
	port->OUTTGL.reg |= (1 << pin);
}

void pinFunction(PortGroup *port, uns32 pin, uns32 fn) {
 2d8:	b530      	push	{r4, r5, lr}
	port->PINCFG[pin >> 1].bit.PMUXEN = 1;
 2da:	0849      	lsrs	r1, r1, #1
 2dc:	1843      	adds	r3, r0, r1
 2de:	3340      	adds	r3, #64	; 0x40
 2e0:	781d      	ldrb	r5, [r3, #0]
 2e2:	2401      	movs	r4, #1
 2e4:	432c      	orrs	r4, r5
 2e6:	701c      	strb	r4, [r3, #0]
	if (((pin >> 1) & 1) == 0)    
 2e8:	07cb      	lsls	r3, r1, #31
 2ea:	d406      	bmi.n	2fa <pinFunction+0x22>
		port->PMUX[pin >> 1].reg |= fn;	
 2ec:	1841      	adds	r1, r0, r1
 2ee:	3130      	adds	r1, #48	; 0x30
 2f0:	780b      	ldrb	r3, [r1, #0]
 2f2:	431a      	orrs	r2, r3
 2f4:	b2d2      	uxtb	r2, r2
 2f6:	700a      	strb	r2, [r1, #0]
 2f8:	e006      	b.n	308 <pinFunction+0x30>
	else
		port->PMUX[pin >> 1].reg |= (fn << 4);
 2fa:	1841      	adds	r1, r0, r1
 2fc:	3130      	adds	r1, #48	; 0x30
 2fe:	780b      	ldrb	r3, [r1, #0]
 300:	0112      	lsls	r2, r2, #4
 302:	431a      	orrs	r2, r3
 304:	b2d2      	uxtb	r2, r2
 306:	700a      	strb	r2, [r1, #0]
 308:	bd30      	pop	{r4, r5, pc}
 30a:	46c0      	nop			; (mov r8, r8)

0000030c <__libc_init_array>:
 30c:	b570      	push	{r4, r5, r6, lr}
 30e:	4e0d      	ldr	r6, [pc, #52]	; (344 <__libc_init_array+0x38>)
 310:	4d0d      	ldr	r5, [pc, #52]	; (348 <__libc_init_array+0x3c>)
 312:	2400      	movs	r4, #0
 314:	1bad      	subs	r5, r5, r6
 316:	10ad      	asrs	r5, r5, #2
 318:	d005      	beq.n	326 <__libc_init_array+0x1a>
 31a:	00a3      	lsls	r3, r4, #2
 31c:	58f3      	ldr	r3, [r6, r3]
 31e:	3401      	adds	r4, #1
 320:	4798      	blx	r3
 322:	42a5      	cmp	r5, r4
 324:	d1f9      	bne.n	31a <__libc_init_array+0xe>
 326:	f000 f8b1 	bl	48c <_init>
 32a:	4e08      	ldr	r6, [pc, #32]	; (34c <__libc_init_array+0x40>)
 32c:	4d08      	ldr	r5, [pc, #32]	; (350 <__libc_init_array+0x44>)
 32e:	2400      	movs	r4, #0
 330:	1bad      	subs	r5, r5, r6
 332:	10ad      	asrs	r5, r5, #2
 334:	d005      	beq.n	342 <__libc_init_array+0x36>
 336:	00a3      	lsls	r3, r4, #2
 338:	58f3      	ldr	r3, [r6, r3]
 33a:	3401      	adds	r4, #1
 33c:	4798      	blx	r3
 33e:	42a5      	cmp	r5, r4
 340:	d1f9      	bne.n	336 <__libc_init_array+0x2a>
 342:	bd70      	pop	{r4, r5, r6, pc}
 344:	00000498 	.word	0x00000498
 348:	00000498 	.word	0x00000498
 34c:	00000498 	.word	0x00000498
 350:	000004a0 	.word	0x000004a0

00000354 <register_fini>:
 354:	4b03      	ldr	r3, [pc, #12]	; (364 <register_fini+0x10>)
 356:	b510      	push	{r4, lr}
 358:	2b00      	cmp	r3, #0
 35a:	d002      	beq.n	362 <register_fini+0xe>
 35c:	4802      	ldr	r0, [pc, #8]	; (368 <register_fini+0x14>)
 35e:	f000 f805 	bl	36c <atexit>
 362:	bd10      	pop	{r4, pc}
 364:	00000000 	.word	0x00000000
 368:	0000037d 	.word	0x0000037d

0000036c <atexit>:
 36c:	b510      	push	{r4, lr}
 36e:	0001      	movs	r1, r0
 370:	2300      	movs	r3, #0
 372:	2200      	movs	r2, #0
 374:	2000      	movs	r0, #0
 376:	f000 f81b 	bl	3b0 <__register_exitproc>
 37a:	bd10      	pop	{r4, pc}

0000037c <__libc_fini_array>:
 37c:	b570      	push	{r4, r5, r6, lr}
 37e:	4b09      	ldr	r3, [pc, #36]	; (3a4 <__libc_fini_array+0x28>)
 380:	4c09      	ldr	r4, [pc, #36]	; (3a8 <__libc_fini_array+0x2c>)
 382:	1ae4      	subs	r4, r4, r3
 384:	10a4      	asrs	r4, r4, #2
 386:	d009      	beq.n	39c <__libc_fini_array+0x20>
 388:	4a08      	ldr	r2, [pc, #32]	; (3ac <__libc_fini_array+0x30>)
 38a:	18a5      	adds	r5, r4, r2
 38c:	00ad      	lsls	r5, r5, #2
 38e:	18ed      	adds	r5, r5, r3
 390:	682b      	ldr	r3, [r5, #0]
 392:	3c01      	subs	r4, #1
 394:	4798      	blx	r3
 396:	3d04      	subs	r5, #4
 398:	2c00      	cmp	r4, #0
 39a:	d1f9      	bne.n	390 <__libc_fini_array+0x14>
 39c:	f000 f880 	bl	4a0 <_fini>
 3a0:	bd70      	pop	{r4, r5, r6, pc}
 3a2:	46c0      	nop			; (mov r8, r8)
 3a4:	000004ac 	.word	0x000004ac
 3a8:	000004b0 	.word	0x000004b0
 3ac:	3fffffff 	.word	0x3fffffff

000003b0 <__register_exitproc>:
 3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3b2:	4644      	mov	r4, r8
 3b4:	465f      	mov	r7, fp
 3b6:	4656      	mov	r6, sl
 3b8:	464d      	mov	r5, r9
 3ba:	469b      	mov	fp, r3
 3bc:	4b2f      	ldr	r3, [pc, #188]	; (47c <__register_exitproc+0xcc>)
 3be:	b4f0      	push	{r4, r5, r6, r7}
 3c0:	681c      	ldr	r4, [r3, #0]
 3c2:	23a4      	movs	r3, #164	; 0xa4
 3c4:	005b      	lsls	r3, r3, #1
 3c6:	0005      	movs	r5, r0
 3c8:	58e0      	ldr	r0, [r4, r3]
 3ca:	000e      	movs	r6, r1
 3cc:	4690      	mov	r8, r2
 3ce:	2800      	cmp	r0, #0
 3d0:	d04b      	beq.n	46a <__register_exitproc+0xba>
 3d2:	6843      	ldr	r3, [r0, #4]
 3d4:	2b1f      	cmp	r3, #31
 3d6:	dc0d      	bgt.n	3f4 <__register_exitproc+0x44>
 3d8:	1c5c      	adds	r4, r3, #1
 3da:	2d00      	cmp	r5, #0
 3dc:	d121      	bne.n	422 <__register_exitproc+0x72>
 3de:	3302      	adds	r3, #2
 3e0:	009b      	lsls	r3, r3, #2
 3e2:	6044      	str	r4, [r0, #4]
 3e4:	501e      	str	r6, [r3, r0]
 3e6:	2000      	movs	r0, #0
 3e8:	bc3c      	pop	{r2, r3, r4, r5}
 3ea:	4690      	mov	r8, r2
 3ec:	4699      	mov	r9, r3
 3ee:	46a2      	mov	sl, r4
 3f0:	46ab      	mov	fp, r5
 3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 3f4:	4b22      	ldr	r3, [pc, #136]	; (480 <__register_exitproc+0xd0>)
 3f6:	2b00      	cmp	r3, #0
 3f8:	d03c      	beq.n	474 <__register_exitproc+0xc4>
 3fa:	20c8      	movs	r0, #200	; 0xc8
 3fc:	0040      	lsls	r0, r0, #1
 3fe:	e000      	b.n	402 <__register_exitproc+0x52>
 400:	bf00      	nop
 402:	2800      	cmp	r0, #0
 404:	d036      	beq.n	474 <__register_exitproc+0xc4>
 406:	22a4      	movs	r2, #164	; 0xa4
 408:	2300      	movs	r3, #0
 40a:	0052      	lsls	r2, r2, #1
 40c:	58a1      	ldr	r1, [r4, r2]
 40e:	6043      	str	r3, [r0, #4]
 410:	6001      	str	r1, [r0, #0]
 412:	50a0      	str	r0, [r4, r2]
 414:	3240      	adds	r2, #64	; 0x40
 416:	5083      	str	r3, [r0, r2]
 418:	3204      	adds	r2, #4
 41a:	5083      	str	r3, [r0, r2]
 41c:	2401      	movs	r4, #1
 41e:	2d00      	cmp	r5, #0
 420:	d0dd      	beq.n	3de <__register_exitproc+0x2e>
 422:	009a      	lsls	r2, r3, #2
 424:	4691      	mov	r9, r2
 426:	4481      	add	r9, r0
 428:	4642      	mov	r2, r8
 42a:	2188      	movs	r1, #136	; 0x88
 42c:	464f      	mov	r7, r9
 42e:	507a      	str	r2, [r7, r1]
 430:	22c4      	movs	r2, #196	; 0xc4
 432:	0052      	lsls	r2, r2, #1
 434:	4690      	mov	r8, r2
 436:	4480      	add	r8, r0
 438:	4642      	mov	r2, r8
 43a:	3987      	subs	r1, #135	; 0x87
 43c:	4099      	lsls	r1, r3
 43e:	6812      	ldr	r2, [r2, #0]
 440:	468a      	mov	sl, r1
 442:	430a      	orrs	r2, r1
 444:	4694      	mov	ip, r2
 446:	4642      	mov	r2, r8
 448:	4661      	mov	r1, ip
 44a:	6011      	str	r1, [r2, #0]
 44c:	2284      	movs	r2, #132	; 0x84
 44e:	4649      	mov	r1, r9
 450:	465f      	mov	r7, fp
 452:	0052      	lsls	r2, r2, #1
 454:	508f      	str	r7, [r1, r2]
 456:	2d02      	cmp	r5, #2
 458:	d1c1      	bne.n	3de <__register_exitproc+0x2e>
 45a:	0002      	movs	r2, r0
 45c:	4655      	mov	r5, sl
 45e:	328d      	adds	r2, #141	; 0x8d
 460:	32ff      	adds	r2, #255	; 0xff
 462:	6811      	ldr	r1, [r2, #0]
 464:	430d      	orrs	r5, r1
 466:	6015      	str	r5, [r2, #0]
 468:	e7b9      	b.n	3de <__register_exitproc+0x2e>
 46a:	0020      	movs	r0, r4
 46c:	304d      	adds	r0, #77	; 0x4d
 46e:	30ff      	adds	r0, #255	; 0xff
 470:	50e0      	str	r0, [r4, r3]
 472:	e7ae      	b.n	3d2 <__register_exitproc+0x22>
 474:	2001      	movs	r0, #1
 476:	4240      	negs	r0, r0
 478:	e7b6      	b.n	3e8 <__register_exitproc+0x38>
 47a:	46c0      	nop			; (mov r8, r8)
 47c:	00000488 	.word	0x00000488
 480:	00000000 	.word	0x00000000
 484:	00000043 	.word	0x00000043

00000488 <_global_impure_ptr>:
 488:	20000008                                ... 

0000048c <_init>:
 48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 48e:	46c0      	nop			; (mov r8, r8)
 490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 492:	bc08      	pop	{r3}
 494:	469e      	mov	lr, r3
 496:	4770      	bx	lr

00000498 <__init_array_start>:
 498:	00000355 	.word	0x00000355

0000049c <__frame_dummy_init_array_entry>:
 49c:	000000e5                                ....

000004a0 <_fini>:
 4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4a2:	46c0      	nop			; (mov r8, r8)
 4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4a6:	bc08      	pop	{r3}
 4a8:	469e      	mov	lr, r3
 4aa:	4770      	bx	lr

000004ac <__fini_array_start>:
 4ac:	000000bd 	.word	0x000000bd
